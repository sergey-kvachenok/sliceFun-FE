/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst } from 'workbox-strategies';

const cashedUrlKeys = {
  shows: 'https://mb6zd106gh.execute-api.eu-west-1.amazonaws.com/dev/',
  s3Images: 'slice-fun-podcasts',
};

const optionsTmpl = {
  icon: '/icon-96x96.png',
  image: '/icon-192x192.png',
  dir: 'rtl',
  lang: 'en-US',
  badge: '/icon-96x96.png',
  vibrate: [200, 100, 200],
};

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');

registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// Caching dynamic-data
registerRoute(
  ({ url, request, event }) => {
    const isMatch = url.href.includes(cashedUrlKeys.shows);
    return isMatch;
  },
  new NetworkFirst({
    cacheName: 'shows-data',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 10 }),
    ],
  }),
);

// Caching S3 images used for shows/episodes
registerRoute(
  ({ url, request, event }) => {
    const isMatch = url.href.includes(cashedUrlKeys.s3Images);
    return isMatch;
  },
  new NetworkFirst({
    cacheName: 'dynamic-s3-images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 10 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Setting web-push notifications
self.addEventListener('notificationclick', async event => {
  const { notification, action } = event;
  const { data } = notification || {};

  try {
    if (action === 'confirm') {
      notification.close();
    } else {
      const clients = await self.clients.matchAll({ includeUncontrolled: true });
      const openClient = clients.find(client => client.visibilityState === 'visible');

      let url = self.location.origin;

      if (data?.openUrl) {
        url += data?.openUrl;
      }

      if (openClient) {
        openClient.navigate(url);
        openClient.focus();
      } else {
        const windowClient = self.clients.openWindow(url);
        await windowClient.focus();
      }
      notification.close();
    }
  } catch (err) {
    console.log('err', err);
  }
});

self.addEventListener('push', async event => {
  console.log('event', event);

  if (!event.data) return;

  const data = JSON.parse(event.data.text());

  const options = {
    body: data.content,
    ...optionsTmpl,
  };

  await self.registration.showNotification(data.title, options);
});
